package me.helloc.enterpriseboard.adapter.`in`.data

import jakarta.persistence.EntityManager
import jakarta.persistence.PersistenceContext
import me.helloc.common.snowflake.Snowflake
import me.helloc.enterpriseboard.CommentApplication
import me.helloc.enterpriseboard.adapter.out.persistence.CommentJpaEntity
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.SpringApplication
import org.springframework.stereotype.Component
import org.springframework.transaction.support.TransactionTemplate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.CountDownLatch
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicLong
import kotlin.math.roundToInt
import kotlin.random.Random
import kotlin.system.exitProcess

@Component
class CommentDataInitializer {
    @PersistenceContext
    private lateinit var entityManager: EntityManager

    @Autowired
    private lateinit var transactionTemplate: TransactionTemplate

    private val snowflake = Snowflake()
    private val completedBatches = AtomicInteger(0)
    private val totalInsertedRecords = AtomicLong(0)
    private val startTime = System.currentTimeMillis()
    private val random = Random.Default
    private val rootCommentIds = ConcurrentHashMap<Int, Long>()

    @Throws(InterruptedException::class)
    fun initialize() {
        println("=".repeat(60))
        println("üöÄ ÎåÄÏö©Îüâ ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÏãúÏûë")
        println("=".repeat(60))
        println("üìä Ï¥àÍ∏∞Ìôî Ï†ïÎ≥¥:")
        println("   - Ï¥ù Îç∞Ïù¥ÌÑ∞ Ïàò: ${String.format("%,d", TOTAL_COMMENTS)}Í∞ú")
        println("   - Î£®Ìä∏ ÎåìÍ∏Ä Ïàò: ${String.format("%,d", ROOT_COMMENTS)}Í∞ú")
        println("   - ÎãµÍ∏Ä Ïàò: ${String.format("%,d", REPLY_COMMENTS)}Í∞ú")
        println("   - Î∞∞Ïπò ÌÅ¨Í∏∞: ${String.format("%,d", BATCH_SIZE)}Í∞ú")
        println("   - Ï¥ù Î∞∞Ïπò Ïàò: ${String.format("%,d", TOTAL_BATCHES)}Í∞ú")
        println("   - Ïä§Î†àÎìú ÌíÄ ÌÅ¨Í∏∞: ${THREAD_POOL_SIZE}Í∞ú")
        println("   - ÏãúÏûë ÏãúÍ∞Ñ: ${LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}")
        println("=".repeat(60))

        val latch = CountDownLatch(TOTAL_BATCHES)
        val executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE)

        for (batchIndex in 0 until TOTAL_BATCHES) {
            executorService.submit {
                try {
                    insertBatch(batchIndex)
                    latch.countDown()
                    updateProgress()
                } catch (e: Exception) {
                    println("‚ùå Î∞∞Ïπò $batchIndex Ïã§Ìñâ Ïã§Ìå®: ${e.message}")
                    e.printStackTrace()
                    latch.countDown()
                }
            }
        }

        latch.await()
        executorService.shutdown()

        printCompletionStats()
    }

    private fun insertBatch(batchIndex: Int) {
        transactionTemplate.executeWithoutResult { _ ->
            val startOffset = batchIndex * BATCH_SIZE

            for (i in 0 until BATCH_SIZE) {
                val recordIndex = startOffset + i
                val comment = if (recordIndex < ROOT_COMMENTS) {
                    createRootComment(recordIndex)
                } else {
                    createReplyComment(recordIndex)
                }

                val jpaEntity = CommentJpaEntity(
                    commentId = comment.first,
                    content = comment.second,
                    parentCommentId = comment.third,
                    articleId = ARTICLE_ID,
                    writerId = generateWriterId(recordIndex),
                    deleted = false,
                    createdAt = LocalDateTime.now(),
                    modifiedAt = LocalDateTime.now()
                )
                entityManager.persist(jpaEntity)

                if (recordIndex < ROOT_COMMENTS) {
                    rootCommentIds[recordIndex] = comment.first
                }

                if (i % FLUSH_INTERVAL == 0 && i > 0) {
                    entityManager.flush()
                    entityManager.clear()
                }
            }

            entityManager.flush()
            entityManager.clear()
        }

        totalInsertedRecords.addAndGet(BATCH_SIZE.toLong())
    }

    private fun createRootComment(index: Int): Triple<Long, String, Long> {
        val commentId = snowflake.nextId()
        val content = generateCommentContent("Î£®Ìä∏ ÎåìÍ∏Ä", index)
        return Triple(commentId, content, commentId)
    }

    private fun createReplyComment(index: Int): Triple<Long, String, Long> {
        val commentId = snowflake.nextId()
        val content = generateCommentContent("ÎãµÍ∏Ä", index)
        
        val rootIndex = (index - ROOT_COMMENTS) % ROOT_COMMENTS
        val parentCommentId = rootCommentIds[rootIndex] ?: throw IllegalStateException("Î£®Ìä∏ ÎåìÍ∏Ä IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: $rootIndex")
        
        return Triple(commentId, content, parentCommentId)
    }

    private fun generateCommentContent(type: String, index: Int): String {
        val uniqueId = UUID.randomUUID().toString().substring(0, 8)
        val randomContent = generateRandomContent()
        return "$type ${String.format("%07d", index)} - $uniqueId $randomContent"
    }

    private fun generateRandomContent(): String {
        val words = listOf(
            "ÏùòÍ≤¨", "ÏÉùÍ∞Å", "ÎåìÍ∏Ä", "ÎãµÎ≥Ä", "ÏßàÎ¨∏", "Ï†ïÎ≥¥", "ÎÇ¥Ïö©", "ÏÑ§Î™Ö",
            "Ï∞∏Í≥†", "Ï∂îÍ∞Ä", "Î≥¥ÏôÑ", "ÏàòÏ†ï", "ÌôïÏù∏", "Í≤ÄÌÜ†", "ÌîºÎìúÎ∞±", "Ï†úÏïà"
        )

        return (1..3).joinToString(" ") { words.random(random) }
    }

    private fun generateWriterId(index: Int): Long {
        return (index % 1000) + 1L
    }

    private fun updateProgress() {
        val completed = completedBatches.incrementAndGet()
        val progressPercent = (completed * 100.0 / TOTAL_BATCHES).roundToInt()

        if (progressPercent % 5 == 0 && progressPercent > 0) {
            val currentTime = System.currentTimeMillis()
            val elapsedTime = currentTime - startTime
            val remainingTime = if (completed > 0) {
                ((elapsedTime.toDouble() / completed) * (TOTAL_BATCHES - completed)).toLong()
            } else 0L

            val currentThroughput = if (elapsedTime > 0) {
                (totalInsertedRecords.get() * 1000.0 / elapsedTime).roundToInt()
            } else 0

            synchronized(this) {
                val lastProgress = ((completed - 1) * 100.0 / TOTAL_BATCHES).roundToInt()
                if (lastProgress / 5 != progressPercent / 5) {
                    println("üìà ÏßÑÌñâÎ•†: ${progressPercent}% | " +
                            "ÏôÑÎ£å: ${String.format("%,d", completed)}/${String.format("%,d", TOTAL_BATCHES)} Î∞∞Ïπò | " +
                            "Ï≤òÎ¶¨Îüâ: ${String.format("%,d", currentThroughput)}Í∞ú/Ï¥à | " +
                            "ÏÜåÏöî: ${formatTime(elapsedTime)} | " +
                            "ÏòàÏÉÅ ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${formatTime(remainingTime)}")
                }
            }
        }
    }

    private fun printCompletionStats() {
        val totalTime = System.currentTimeMillis() - startTime
        val avgThroughput = if (totalTime > 0) {
            (totalInsertedRecords.get() * 1000.0 / totalTime).roundToInt()
        } else 0

        println("\n" + "=".repeat(60))
        println("‚úÖ ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!")
        println("=".repeat(60))
        println("üìä ÏôÑÎ£å ÌÜµÍ≥Ñ:")
        println("   - Ï¥ù Ï≤òÎ¶¨ Îç∞Ïù¥ÌÑ∞: ${String.format("%,d", totalInsertedRecords.get())}Í∞ú")
        println("   - Î£®Ìä∏ ÎåìÍ∏Ä: ${String.format("%,d", ROOT_COMMENTS)}Í∞ú")
        println("   - ÎãµÍ∏Ä: ${String.format("%,d", REPLY_COMMENTS)}Í∞ú")
        println("   - Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ: ${formatTime(totalTime)}")
        println("   - ÌèâÍ∑† Ï≤òÎ¶¨Îüâ: ${String.format("%,d", avgThroughput)}Í∞ú/Ï¥à")
        println("   - ÏôÑÎ£å ÏãúÍ∞Ñ: ${LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}")
        println("=".repeat(60))
    }

    private fun formatTime(timeMillis: Long): String {
        val seconds = timeMillis / 1000
        val minutes = seconds / 60
        val hours = minutes / 60

        return when {
            hours > 0 -> "${hours}ÏãúÍ∞Ñ ${minutes % 60}Î∂Ñ ${seconds % 60}Ï¥à"
            minutes > 0 -> "${minutes}Î∂Ñ ${seconds % 60}Ï¥à"
            else -> "${seconds}Ï¥à"
        }
    }

    companion object {
        const val TOTAL_COMMENTS = 12_000_000
        const val ROOT_COMMENTS = 6_000_000
        const val REPLY_COMMENTS = 6_000_000
        const val BATCH_SIZE = 5_000
        const val TOTAL_BATCHES = TOTAL_COMMENTS / BATCH_SIZE
        const val THREAD_POOL_SIZE = 20
        const val FLUSH_INTERVAL = 1000
        const val ARTICLE_ID = 1L

        @JvmStatic
        fun main(args: Array<String>) {
            val context = SpringApplication.run(
                CommentApplication::class.java,
                *args
            )

            try {
                val dataInitializer = context.getBean(CommentDataInitializer::class.java)
                dataInitializer.initialize()
                println("‚úÖ ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞ÌôîÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
            } catch (e: Exception) {
                println("‚ùå ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}")
                e.printStackTrace()
            } finally {
                context.close()
                exitProcess(0)
            }
        }
    }
}